function spectrum_compare

%%
% define the path and name for Spektr spectrum
path1 = 'D:\X_Ray_tube_Spectrums\Spektr-3.0\Spektr 3.0\Spektr Code';
name1 = 'Spektr_spectrum3.txt';

% define the  path and name for Spekpy spectrum
path2 = 'D:\X_Ray_tube_Spectrums\spekpy-spekpy_release-b92159f042e0\spekpy-spekpy_release-b92159f042e0';
name2 = 'spekpy_spectrum3.txt';

% define the path and name for example EGSNRC spectrum
%path3 = 'C:\EGSnrc-master\HEN_HOUSE\spectra\egsnrc';
path3 = '.';
name3 = 'Default Dataset.csv';

% import data sets
data1 = importspektr([path1,'\',name1]);
data2 = importspekpy([path2,'\',name2]);
%data3raw = importegsnrc([path3,'\',name3]);
data3 = importdata([path3,'\',name3]);

%data3 = double(data3raw(3:end,1:2));

data3_n = data3;
data3_n(:,1) = data3_n(:,1)./1e3;
data3_n(:,2) = normalize(data3_n(:,2),'range',[0 1.8]);

%% visulize the imported data and compare

%figure;
subplot(1,2,1)
yyaxis left
plot(data1(:,1),data1(:,2),'bo-','linewidth',2)
ylim([0 7e4])

hold on 
yyaxis right
plot(data2(:,1),data2(:,2),'r.-')
ylim([0 0.95e7])
hold off 

xlabel('Photon Energy (keV)')
legend('spektr','spekpy')
set(gca,'Fontsize',16);

subplot(1,2,2)

plot(data3_n(:,1),data3_n(:,2),'g*','linewidth',1)
hold on;
%%

%subplot(1,2,2)

%% generate a spectrum file for EGSnrc simulation
%% ========================================================================
% ==============================begin of Spectrum 1========================
% prepare the data for write
ind1 = find(isnan(data1(:,1)));

data1_n = data1(1:ind1(1)-1,:);
data1_n(:,2) = normalize(data1_n(:,2),'range');
data1_n(:,1) = data1_n(:,1)./1e3;
data1_n(data1_n<1e-6) = 0;
plot(data1_n(:,1),data1_n(:,2),'r')




% write data into a spectrum file
SPEC_TITLE = ['125 keV X-ray tube generated spectrum (Method = Spektr)'];
NENSRC = length(data1_n); % # of energy bins in the spectrum histogram
ENMIN  = 0.5E-4; % lower energy of first bin in MeV 
IMODE  = 0; % set to 0 for histogram counts/bin; set to 1 for counts/MeV

spectrum1 = strings(length(data1_n)+2,3);
spectrum1(1,1) = SPEC_TITLE;
spectrum1(2,1) = string(NENSRC);
spectrum1(2,2) = string(ENMIN);
spectrum1(2,3) = string(IMODE);

spectrum1(3:end,1:2) =  string(data1_n);

write_spectrum_file('spektr_125keV.spectrum',spectrum1)
% ==============================End of Spectrum 1==========================
%% ========================================================================
% ==============================begin of Spectrum 2========================

data2_n = data2(:,1:2);

data2_n(:,2) = normalize(data2_n(:,2),'range',[0 3.3]);
data2_n(:,1) = data2_n(:,1)./1e3;

plot(data2_n(:,1),data2_n(:,2),'r')


hold off

SPEC_TITLE = ['125 keV X-ray tube generated spectrum (Method = SpekPy)'];
NENSRC = length(data1_n); % # of energy bins in the spectrum histogram
ENMIN  = 0.5E-4; % lower energy of first bin in MeV 
IMODE  = 0; % set to 0 for histogram counts/bin; set to 1 for counts/MeV

spectrum2 = strings(length(data2_n)+2,3);
spectrum2(1,1) = SPEC_TITLE;
spectrum2(2,1) = string(NENSRC);
spectrum2(2,2) = string(ENMIN);
spectrum2(2,3) = string(IMODE);

spectrum2(3:end,1:2) =  string(data2_n);
write_spectrum_file('spekPy_125keV.spectrum',spectrum2)
% ==============================End of Spectrum 2==========================


end 

%% ========================================================================
function Spektrspectrum = importspektr(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   SPEKTRSPECTRUM = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   SPEKTRSPECTRUM = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Spektrspectrum = importfile('Spektr_spectrum.txt', 1, 164);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2021/02/17 09:43:41

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
Spektrspectrum = cell2mat(raw);
end
%% ========================================================================
function spekpyspectrum = importspekpy(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   SPEKPYSPECTRUM = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   SPEKPYSPECTRUM = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   spekpyspectrum = importfile('spekpy_spectrum.txt', 18, 255);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2021/02/17 10:06:38

%% Initialize variables.
delimiter = ';';
if nargin<=2
    startRow = 18;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
spekpyspectrum = [dataArray{1:end-1}];
end
%% ========================================================================
function mvalnrcm = importegsnrc(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   MVALNRCM = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   MVALNRCM = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   mvalnrcm = importfile('15mvalnrcm.spectrum', 1, 82);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2021/02/17 11:42:55

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
mvalnrcm = [dataArray{1:end-1}];

end
%% ========================================================================
function write_spectrum_file(Name,spectrum)

file1 = fopen(Name,'w');
fprintf(file1,'%s \n',spectrum(1,1));
fprintf(file1,'%s, %s, %s\n',spectrum(2,:));
fprintf(file1,'\t %s, %s\n',[spectrum(3:end,1:2)]');
fclose(file1);

end

% function spectrum = generate_spectrum(name,D1,D2,D3,datan)
% 
% 
% end